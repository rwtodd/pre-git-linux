(also includes notes for the 0.96 patch sets, not included in this repository)

    [PATCH] Linux-0.97 (August 1, 1992)
    
    Move <xxx.h> to <linux/xxxx.h>
    
    Variable-sized buffer blocks and dynamic buffer cache allocation. The VM
    knows how to shrink it automatically!
    
    Add support for "fast" interrupt handlers for serial lines.
    
    Update copyrights to say 1992 too.
    
    Remove broken VESA video card handling.
    
    Separate out partition handling code ("genhd").
    
    Make init unkillable.
    
    Norwegian keyboard map.
    
    Future Domain SCSI controller driver by Rik Faith.
    
    Changes in 0.97:
    
     - The VESA-support was removed.  I'd be happy to put it back once it
       works on all hardware.  Instead of the VESA-code, I finally put in
       the automatic SVGA setup patches.  See the top-level Makefile.
    
     - The IRQ code has solidified, and should work on all machines.  Not
       all of the SCSI drivers use it yet, so I expect patches for that..
    
     - Serial interrupts are handled slightly differently, and performance
       should be up.  I've sent out a few alpha-releases, and testing seems
       to indicate that's actually true this time.  Reactions have ranged
       from "nice" to "wonderful" :-)
    
     - The buffer-cache and memory management code has been edited quite a
       bit.  ps/free etc programs that reads kernel memory directly no
       longer work, and even a recompilation won't be enough.  They actually
       need editing before they work.
    
       The buffer-cache now grows and shrinks dynamically depending on how
       much free memory there is.  Shift+PrintScreen will give some memory
       statistics.  (Ctrl+PrSc gives task-info, ALT+PrSc gives current
       register values).
    
       The mm code changes removed some race-conditions in the VM code, and
       I also tried to make the Out-of-swapspace error less severe (better
       thrashing-detection etc).
    
     - The super-block code has been cleaned up.  Especially the extended fs
       needs to be edited a bit to take advantage of the new setup, and I
       expect Remy Card will have a patch out eventually.
    
     - include-files have been moved around some more: there are still some
       names that clash with the standard headers, but not many.
    
     - Unswappable processes implemented: by default only 'init' is
       unswappable.  This is a bit safer in low-memory conditions, as at
       least init won't die due to low memory.  I also made killing init
       impossible: if init doesn't recognize a signal, it simply won't get
       it.  Some other changes ("while (1) fork();" won't kill the machine
       for non-root users etc)
    
     - The new SCSI drivers are in.  These make the kernel noticeably
       bigger, but you can leave them out if you don't want them.
    
     - The floppy- and hd-drivers print out more debugging-info in case of
       errors: this might be irritating if you have hardware that works, but
       often gives soft-errors.  On the other hand, some old debugging-info
       was removed - notably for user-level protection errors etc.
    
     - Various minor fixes.  I haven't made cdiffs (and I haven't gotten any
       requests for them, so I probably never will), but they would be
       pretty big.
    
    Things that I didn't have time for:
    
     - I wanted to rewrite the tty drivers to be more "streams-like" (ie not
       an actual streams-implementation, but some of the ideas from
       streams).  I never got around to it: there was simply too much else
       to do.
    
     - I got a lot of patches, and some went in, others didn't.  If you
       think your patch was important, please re-send it relative to the new
       version.
    
    I'd like comments on the new system: performance / clarity of code etc.
    0.97 should correct all known bugs (at least the ones I know about), but
    I guess that's just wishful thinking.
    
    Note that the dynamic buffer-code also handles differently-sized
    buffers, but that the rest of the system (block device drivers,
    filesystem code etc) cannot yet take advantage of this - there is still
    some coding needed.
    
                    Linus

Date:   Tue Apr 21 11:00:00 1992 -0800

    [PATCH] Linux-0.96-pre (April 21, 1992)
    
    More VFS layer work: remove more special cases, and take advantage of
    the virtual VFS functions (close and select).  Add fchown/fchgrp and
    [f]truncate.
    
    Orest Zborowski shows up, and works on porting X11 to X.  This needs a
    lot of infrastructure support: ioperm() for user-mode IO port access,
    and SVR style virtual terminal ioctl's to make porting easier.  Perhaps
    more importantly, the mmap() system call shows up, even if it right now
    is limited only to a direct /dev/mem remapping.
    
    [Original changelog below]
    
    - truncate/ftruncate/fchmod/fchown system calls
    
            note that there aren't any library functions for these, so they
            aren't very useful yet...
    
            [f]truncate needed a change in the logic of the internal
            truncate VFS call - anybody that has any nonstandard filesystem
            probably needs to look it up.
    
    - io-bitmap syscalls giving root-processes access to selected io ports
      from user space.  There is a "ioperm()" system call that lets the
      process select which ports it wants to enable/disable (all ports
      disabled as default) as well as a (standard sysv?) ioctl interface
      that X uses.
    
            again, no library stubs, but it allows things like reading and
            setting the cmos clock without using /dev/port, as well as
            control over the VGA registers...
    
    - mmap for /dev/mem
    
            more things needed for X...
    
    - the signal-handling fixes needed for gdb
    
            These aren't yet complete: serial lines still send signals under
            interrupts that can result in problems (ie ptrace doesn't
            correctly get them), but that's pretty unlikely (and will be
            fixed in the final 0.96).  Breakpoints should work etc..
    
    - multiple shared libraries
    
            Up to 6 simultaneous shared libraries/process: the patches were
            originally by pmacdona, but they were heavily changed by me, and
            I think they work in a more natural manner now.  One user-level
            change is that the libraries are now checked for read and
            execute permissions for safety-reasons.
    
    - cleaned up special files.
    
            read/write/ioctl no longer has special-case code: it is all
            handled with tables to functions.  This will mean that the SCSI
            patches won't patch in quite cleanly into 0.96: you'll need to
            add the code that sets up the functions.
    
            Again: device drivers and vfs-filesystem hackers need to look
            into the changes, although they are pretty logical (earlier
            versions just didn't implement all the vfs-routines)
    
            Note that the vfs-code for select is still not used: select is
            hardcoded for the devices it supports right now.
    
    - ptrace() has a new interface
    
            as gdb for versions < 0.95c don't work on the new version, and
            gdb won't work very well at all on 0.95c[+], there was no reason
            not to break ptrace.  Thus 0.96 has a new calling convention for
            ptrace, and the old ptrace library function no longer works.
            I'm including the new ptrace library function at the end of this
            post.
    
    - mount() takes 4 arguments, and checks that only the super-user can
      mount/umount things.
    
            Happily this shouldn't break any old binaries.
    
    - some general cleanups

Date:   Sat Jul 4 11:00:00 1992 -0800

    0.96c second patch
    
    The subject pretty much says it all: I've sent out the "weekly patch"
    and I'd be very interested in comments. As with patch1, there are some
    very fundamental changes in the kernel, and they might have some
    problems. I'd want as many as possible to test out linux-0.96c.pl2, as
    that has always been the best way to test out the changes. Everything
    works on my machine, but that doesn't guarantee it will work on other
    setups...
    
    The MAJOR change in 0.96c.pl2 is the totally rewritten sleep/wakeup
    code. That, together with the IRQ code introduced in pl1 and slightly
    edited in pl2, means that two very fundamental things in the linux
    kernel have changed in the last two weeks. The code is cleaner, easier
    to add devices to, and hopefully faster, but it's still a bit risky to
    change this kind of very low-level behaviour.
    
    Select() is now implemented using the vfs jump tables, and thanks to the
    better sleep/wakup interface, select() performance should be noticeably
    better. At least xload seems to give lower load-averages, and I hope
    ka9q will work better with the new kernel. Note that things like the
    tty code doesn't yet take full advantage of the new features the
    rewritten sleep offers, but I wanted to get a good testing-release out
    before actually tweaking all the routines to use the new interface.
    
    The IRQ routines have changed slightly, and all known bugs are fixed.
    
    While I'm most interested to hear comments about the IRQ and
    select/sleep/wakup code, there are a few other changes in pl2:
    
     - Swiss keyboard support.
    
     - Screen blanking now only reacts to key-presses and kernel messages:
    normal tty output doesn't make the screen unblank.
    
     - DOS-fs version 5 is in. It wouldn't hurt to try it out. It's
    somewhat alpha still, but it seems to work. mtools should be a thing of
    the past once the dosfs is a bit more tested.
    
     - core-file magic number, and a minor bug in ptrace is fixed
    
     - a bus-mouse is supported. I'd like to hear if it still works after I
    did the select() patches "blind" (I can't test it on my machine).
    
     - iopl changing is possible (but requires root priviledges): this
    allows access to all IO ports, as well as the interrupt flag. Don't use
    it unless /absolutely/ necessary: a bug in your program will most likely
    crash the machine if you are running with IO priviledges. It's needed
    for some X VGA drivers.
    
    As a result of all the changes, the diff is pretty big. Apply and build
    it with something like:
    
            cd /usr/src
            zcat linux-0.96c.patch2.Z | patch -p0
            cd linux
            make dep
            make clean
            make Image
    
    assuming you have the 0.96c.pl1 kernel in /usr/src/linux. I've had some
    reports that my patches won't always go in cleanly: I know for a fact
    that patch1 patches cleanly (I rebuilt 0.96c.pl1 by downloading it all
    from banjo), so the error is in your end.
    
    Possible problems:
    
     - The VESA code in setup.S has some problems. I haven't even looked
    into it yet, so if it won't work for you, please either (a) use the
    unpatched setup.S from 0.96c, or (b) try to find the problem and tell
    me. (b) is preferable, of course. I'd like to have VESA support, but
    if the bug isn't found, I'll have to use the non-VESA version for 0.97.
    
     - The IRQ code in 0.96c.pl1 could overrun the stack if linux got
    un-ending interrupt requests, resulting in a re-boot. With pl2, this
    shouldn't happen: linux should print out something like "Recursive
    interrupt on IRQx. Shutting down" and simply disable the problematic
    IRQ line. If you see this message, I'd be very interested to hear about
    it (which IRQ, what devices you have, etc).
    
     - And any new or old bugs I haven't found yet.
    
    I have one report that 0.96c.pl1 has problems with the inode table, and
    panics on bootup with a "no more inodes in mem" report. Can anybody
    confirm this sighting? I haven't found the reason for it, and haven't
    seen it myself. I'm hoping it's an installation problem, but if anybody
    else sees the same behaviour, I'm SOL.
    
                Linus

Date:   Sat Jul 4 11:00:00 1992 -0800

    linux-0.96c.patch1 contains more changes than I originally envisioned: I
    changed the IRQ routines and the serial code to be easier and cleaner
    (and hopefully more efficient) and I thought that would be it. I was
    wrong.
    
    I got several patches (and one bug-report) again, and while I haven't
    had time to check them all, some of them are in. Fixes:
    
     - Remy Cards correction to the out-of-space problem with the extended
    fs is here. Most people using the ext-fs might already have applied
    this patch, in which case you might have problems patching.
    
     - my ftruncate() fix is here. Again, if you already did the trivial
    patch by hand, you'll get errors when patching.
    
     - almesber's implementation of read-only filesystems is here (after
    editing by yours truly). The mount() system call now accepts a flags
    integer as well as a pointer to some arbitraty data in user space for
    some special mount() calls. The general flags allow (a) read-only
    mounting, (b) disabling of suid executables (c) disabling of device
    special files and (d) total disabling of executables on a per-filesystem
    basis. The filesystem specific mount() info isn't currently used by any
    fs, but can be used to specify additional information that depends on a
    special fs type (a password or similar would be possible..)
    
     - the rename() system call had a bug in that it allowed moving over a
    directory: I think the code to handle this was lost in the vfs editing,
    and although the GNU mv utility checked it, a malicious (or just
    unsuspecting) program can destroy the fs using this. Thanks for the
    bug-report: it was very easy to add once I saw the problem.
    
     - support for vesa-standard svga cards in setup.S. I'm unable to test
    this, but my svga card still works after the patch, so I left it in in
    the hope that it doesn't break for anybody else.
    
     - various minor editing by me, or minor patches sent in by others.
    
    The full cdiff is almost 50kB compressed, so this is a bigger-than-usual
    patch. Hope there are no problems. People who are using the new SCSI
    drivers might have problems with my changes to the SCSI irq-setup
    changes, so be careful (actually using the original sources might be a
    good idea, and then upgrading again). I hope to get the new SCSI
    drivers into the kernel soon (definitely in time for 0.98).
    
    I'd be interested to hear comments on serial line performance, bugs,
    features, etc. As usual, I'm hoping this release won't contain any new
    bugs while fixing all the old ones, but I guess that's likely to happen
    right after the first winter olympics in Hell.
    
                Linus

Date:   Sat Jul 4 11:00:00 1992 -0800

    [PATCH] Linux-0.96c (July 4, 1992)
    
    Ext filesystem support! The VFS layer switchover was successful.
    Ext support is a more FFS-like filesystem, although still quite heavily
    influenced by my original Minix filesystem.  But it allows much bigger
    filesystems (minixfs was limited to 64MB) and many more files (minixfs
    had a 16-bit inode number).
    
    Named pipes by Paul Hargrove (using the regular pipe code for actual IO).
    
    [original announcement below]
    
    0.96c is actually what I called patch3 earlier this week, but as the new
    features were pretty big and the cdiff's are probably going to be bigger
    than the normal patches, I decided I might as well make it a totally new
    minor release and make a bootimage and complete source available.
    
    0.96c contains:
     - bugfixes (tty, console driver, pty's, sockets)
     - fifo's (names pipes - Paul Hargrove & editing by me)
     - the alpha extended filesystem (Remy Card)
     - st_blocks implemented (ie du, ls give reasonable if not exact values
       for disk-space used)
     - Makefile cleanups and warnings at compile-time removed
    
    Note that while the extended filesystem code is there, and this kernel
    successfully mounts and uses the new filesystem (with long filenames and
    >64MB partitions), it's still under testing: I haven't made the mkefs
    program available, and the extended filesystem features shouldn't be
    used for other than testing right now.
    
    Some of the changes are just cleanups: most of the warnings when
    compiling the new kernel should be gone (not counting the scsi code
    which is still the old non-cleaned-up version), and the make'ing of the
    kernel is more logical now.
    
    The bugfixes include the corrected console.c driver, the socket
    corrections (without which X sometimes locks up), some pty semantics
    corrections (although I'm still not certain it's correct) and some
    editing in the general tty driver (including fixing the bug introduced
    in 0.96b.pl2 that caused a reboot with uninitialized tty devices).
    
    While the extended filesystem support isn't "official" yet, I can
    happily report that my limited testing hasn't found any problems with
    long filenames etc.  It still needs a fsck program, but 1.0 looks like a
    real possibility soon.
    
                    Linus

Date:   Sun Jun 21 11:00:00 1992 -0800

    As promised, here is the second patch for 0.96b which hopefully clears
    up the problems with some mice by implementing most of the serial line
    flags like 5-8 bit characters and parity. It mainly corrects only
    serial problems, but there are a couple of other patches in it too: the
    fsqrt emulation patch is here, so if you already did it, you'll get a
    bad patch for that file (which you can ignore). This patch also changes
    all instances of signal-setting to use the "send_sig()" subroutine which
    should allow gdb to debug all signals.
    
    Apart from the serial lines, I also cleaned up the general tty-handling
    routines slightly and removed at least one race-condition in the tty
    code. I don't know if it's noticeable, though.
    
    You'll need patch1 (available from all the normal sites) in order to
    apply this one. As usual, I'd like to hear if this patch does help
    people, or if there are new problems. This patch will also be available
    on the normal ftp sites, but as it was pretty minor, I decided I might
    as well include it in the post (uuencoded and compressed).
    
    (I also corrected the all-time favourite bug: linux now reports the
    right version number once more..)
    
                Linus

Date:   Sun Jun 21 11:00:00 1992 -0800

    Re: Too much uneaten serial causes system hang?
    
    In article <arumble.709312764@extro.ucc.su.OZ.AU> arumble@extro.ucc.su.OZ.AU
    (Anthony Rumble) writes:
    >
    >YES! I have noticed this VERY exact thing also!
    
    Oh, well: it's a bug in the serial drivers that I have already fixed,
    but I haven't done the c-diffs yet. I have rewritten big parts of the
    serial line code to be more easily configured for different IRQ numbers,
    and I noticed the bug while doing that. I'll make patch1 for 0.96b
    available later today or tomorrow.
    
    patch1 will be mostly just the serial driver code: it allows changing
    the irq's (and port addresses) of serial devices on the fly (with an
    ioctl call), so people that have ser4 on irq5 etc shouldn't have to
    recompile the kernel. It also returns EBUSY if you try to open a serial
    line that shares the irq-line with another line etc.
    
    Another change in patch1 will the the handling of ctrl-alt-del: it will
    send a SIGINT to the init process if the reset-function is disabled.
    This makes it ideal for a controlled shutdown, but it does need a
    /bin/init that knows about this.
    
                Linus
    
    PS. It seems both the DOS-fs and the extended fs will be out for
    alpha-testing next week, so I assume 0.97 will have them both if things
    work out ok.

Date:   Sun Jun 21 11:00:00 1992 -0800

    [PATCH] Linux-0.96b (June 21, 1992)
    
    First cut at core-dumping.  Also, do more dynamic boottime memory
    allocation, rather than allocating data structures statically.
    
    Allocate task structures at run-time rather than having a big array of
    them.
    
    First "obsolete" system call.  The old "stat()" system call was too
    limited, due to "struct stat" having various 16-bit fields etc (notably
    inode numbers).  We make a new stat() function, and keep the old one
    around as "old_stat()" for binary compatibility.
    
    We also need a bigger "utsname" to hold real node names.
    
    Whoo! NR_OPEN is now 32 rather than 20.
    
    itimer() support driven by X11 adoption (Darren Senn).
    
    gcc starts using fsqrt, so that gets added to the FP emulation.  We're
    still basing that on my trivial code.
    
    [Original changelog below]
    
    0.96b is not a new major release: it's pretty close to 0.96a with all my
    patches (1-4).  However, as there has been 4 patches already, I decided
    it would be time for a full kernel release along with a bootimage, so
    that people who don't feel confident with patching can use the new
    features.
    
    If you already have 0.96a patchlevel 4, 0.96b will offer you these new
    features:
    
     - the math-emulation now handles fsqrt, as gcc-2.2.2 generates that
       inline.  I haven't tested the kernel code at all: I tested the
       algorithm in user space, but I'm lazy, so I never turned off my 387
       to do real testing.  I hope it works.
     - better vt100 terminal emulation thanks to Mika Liljeberg.
     - I removed a possible race-condition in the buffer-cache code.
     - minor fixes
    
    The vt100 emulation should now be complete enough for almost everything
    (including vt100 test suites): as a result the setterm utility had to be
    changed (as the old setterm codes aren't compatible with the full vt100
    codes).  setterm-0.96b.tar.Z contains the new setterm.
    
    The soon-to-be-released gcc-2.2.2 will need the 0.96b kernel: (a) due to
    the fsqrt emulation and (b) it uses the new stat() system call.  So
    upgrading is a good idea.  (If you have a co-processor, (a) isn't used,
    but (b) still stands)
    
    If you have an unpatched 0.96a, the differences to 0.96b are roughly
    (not counting the above-mentioned new things):
    
     - corrected the disk-buffer-list bug with read/write-errors
     - fixed read-ahead warning messages at end of disk
     - better support for text-mode restoration after running MGR and X
     - full core-dumping, attach/detach etc debugging features
     - 16550A support
     - less low 1MB memory used for kernel structures
     - various minor fixes
    
    Note that the fact that new versions (pl4 and above) use more memory in
    the 1M+ area means that linux will report less free memory (it's used
    for buffer-cache instead).  This could concievably be a problem on 2MB
    machines.  The standard kernel comes with only 4 pty's though, and if
    you use the standard 80x25 text modes instead of svga modes, the VC
    buffers will be smaller.  Please contact me if there are problems even
    with this minimal setup.
    
    0.96b does /not/ contain: the new scsi drivers, new filesystems or some
    other patches I have gotten (ibm character set mode, loop-devices etc).
    If you have sent me any other patch, you might want to remind me about
    it.
    
                    Linus

Date:   Fri May 22 11:00:00 1992 -0800

    32-bit inodes: patch4
    
    Ok, patch4 implements 32-bit inode numbers (and thus the new
    stat/lstat/fstat system calls), as well as correcting the bad
    rs-performance on some machines that showed up in patch3. It's
    currently only on banjo, but I'll copy it around eventually.
    
    Again, you don't miss much if you don't use this patch: it's mainly for
    (a) the serial problems and (b) for hlu etc that want to test out the
    32-bit interface. It does some other magical tricks as well (uses less
    memory in the low 1M region by moving the screen and tty buffer to high
    memory), if anybody is interested.
    
                Linus

Date:   Fri May 22 11:00:00 1992 -0800

    patch3....
    
    Ok, I already announced it on the kernel mailing-list, but I might as
    well go all the way. I put out patch3 to 0.96a yesterday, and it's
    available on banjo in pub/Linux/Linus, and I'll upload it to the other
    normal ftp-sites tonight.
    
    NOTE! Patch3 is (like patch2) more of a kernel-hacker patch: it's just
    in case you want to keep up with my kernel. It has some problems with
    some serial lines, and if you experience them, I'd like to know what
    type of chip you are running (and what linux reports on bootup). If you
    don't think patching the kernel is fun, you might as well forget this
    and wait for a real release (next month?).
    
    Patch 3 contains:
    
    - support for attaching and detaching processes under gdb (but you need
      a gdb that knows about this).
    - 16550A support
    - full core-dumping (again, you need a gdb that supports it)
    - sockets have no problems with non-root binding etc
    - /dev/zero implemented (mknod /dev/zero c 1 5)
    
    None of the patches are very big (the whole patch is 17kB compressed,
    most of it attach/detach code), but they are all pretty useful.
    
    The 16550A support means that with the appropriate chip you now should
    be able to use the serial ports at much higher speeds, but as mentioned,
    it seems to break on some machines.
    
    The detaching isn't perfect yet (I noticed only after making the diffs
    that I had forgotten to do some cleanups), but it's not generally a
    problem (the code just forgets to give the process back to it's rightful
    father).
    
    The patch is relative to the pl2 kernel, so you have to use the earlier
    patches first. This time, I've added the lib/itimer.c code.
    
    16550A support was written by tdavis, the correct format of the
    core-dumps was written by eric (who also wrote the attach/detach code I
    used as an example when implementing it), /dev/zero was written by
    almesber. Nice to see good patches: I just did the socket-thing and
    rewrote the attaching to suit me.
    
                Linus

Date:   Fri May 22 11:00:00 1992 -0800

    Second patch to 0.96a
    
    I have just sent off the second patch to 0.96a: it should be on the
    normal ftp-sites (nic, tsx-11 and banjo), although the only site which I
    can make it directly readable on is banjo, so on the other sites it will
    take the site-managers to make the patch available.
    
    Patch 2 implements:
    
    - itimers (by Darren Senn), which are now also used to implement the
      alarm() system call.
    
    - ultrastor scsi driver patches (by gentzel)
    
    - [f]statfs() system call is implemented (so df can be made fs-
      independent). Also some other minor fs-changes for the upcoming new
      filesystem. Patches by Remy Card.
    
    - preliminary core-file dumping code (linux creates a core-file, but
      it's not in the correct format yet [*]).
    
    - minor changes/bugfixes.
    
    While patching in patch1 is a good idea for anybody, patch 2 isn't
    really vital. I've made it available just so kernel hackers can keep up
    with the kernel I have right now if they wish. Patch 2 is relative to
    patch 1: you have to patch that in first.
    
    [*] The current core-file is very simple, and the kernel code is there
    just so that some enterprising character can expand it. A core-file
    looks like this right now:
    
    offset data
    0x0000 "core-dump: regs=\n"
    0x0040 struct pt_regs (see <sys/ptrace.c>)
    0x0400 "floating-point regs:\n"
    0x0440 struct i387 (see <linux/sched.h>)
    0x0800 the first 1kB of user-space
    
    Not very practical, but it /might/ help if the X-server dies of a
    segmentation fault or similar (you can use pt_regs.eip to see where it
    happened). The kernel code is very easy to change to accomodate for the
    real core-file format, I just didn't know what it should be.
    
                    Linus

Date:   Fri May 22 11:00:00 1992 -0800

    Here is the patch to 0.96a that corrects the harddisk error bug, dup2()
    and X11 text-mode restoration.  Thanks to Rick Sladkey for finding the
    dup2() bug.

Date:   Fri May 22 11:00:00 1992 -0800

    [PATCH] Linux-0.96a (May 22, 1992 ??)
    
    More VFS cleanups.  Minixfs code reorganized to be more logical, and
    split up into a few new files.
    
    SCSI support!!
    
     - Drew Eckhardt does the SCSI stuff, and does the ST01/ST02 lowlevel
       driver.
    
     - Ultrastor driver by David Gentzel.
    
     - Tommy Thorn shows up again.  He did the Danish keyboard tables, now
       he does the AHA 1542 driver.  Ten years later we ended up being
       co-workers at Transmeta ;)
    
    First networking code appears: X11 port needs UNIX domain sockets, and
    thus the "socketcall()" system call.  It's not really meant for real
    networking, although the code will eventually evolve to support that.
    Which explains some of the bad early decisions..  ;)
    
    Werner Almerberger starts taking over floppy driver maintenance.  Thank
    Gods!
    
    Johan Myreen translates my assembly-level keyboard driver into C code,
    and adds support for diacriticals.
    
    OMAGIC a.out format support
    
    Syslog support for the kernel appears.  If I remember correctly, this
    was Peter MacDonald, but no mention of that in the sources.

Date:   Thu Apr 9 11:00:00 1992 -0800

    [PATCH] Linux-0.95c+ (April 9, 1992 ??)
    
    Bruce Evans shows up here quickly.
    
    Bruce was the author of the Minix/386 patches, and had been one of my
    sounding boards for my early development, so it was very gratifying to
    see him get interested in Linux.  As it turned out, what he was _really_
    interested in was the serial driver, and the Linux serial driver was
    already in reasonably good shape.
    
    As a result, Bruce went off to work on 386BSD instead (where the serial
    driver was truly crappy), but here he worked on some boot loader cleanups.
    
    Bruce was my hero.
    
    Anyway...  More VFS work here: readdir, bmap and ioctl's are now virtual
    operations, and the superblock code is properly virtualized.
    
    Other changes:
    
     - James Wiegand writes initial parallell port printer driver
    
     - major/minor fault tracking
    
     - I rewrote big chunks of ptrace.c

Date:   Tue Mar 17 12:00:00 1992 -0800

    [PATCH] Linux-0.95a (March 17, 1992)
    
    Oops.  I had forgotten to change the kernel version number in 0.95 (so
    it showed as 0.12).
    
     - 80x50 console on standard VGA
     - do "memcpy_fromfs()" and "memcpy_tofs()" rather than byte-at-a-time
       to improve performance (inspired by some earlier patches by Keith White)
     - allow select() on many more file descriptors
     - support up to 4 serial ports (and increase buffering size)
     - Branko Lankester helped make extended partitions work and implemented
       DM partition table support
    
    The big deal in the release notes is actually that the root diskette
    maintainership had been moved over to Jim Winstead Jr.

